###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class AgentActionEnd(BaseModel):
    action: Optional[Literal["end"]] = None
    result: Optional[str] = None

class AgentActionInputRequired(BaseModel):
    action: Optional[Literal["input_required"]] = None
    prompt: Optional[str] = None

class AssistantActionAgent(BaseModel):
    action: Optional[Literal["transfer_to_agent"]] = None
    agent: Optional[Union[types.AgentName, str]] = None
    tasks: List[str]
    context: Optional[str] = None

class AssistantActionEnd(BaseModel):
    action: Optional[Literal["end"]] = None
    answer: Optional[str] = None

class AssistantActionInputRequired(BaseModel):
    action: Optional[Literal["input_required"]] = None
    prompt: Optional[str] = None

class CalendarActionEnd(BaseModel):
    action: Optional[Literal["end"]] = None
    answer: Optional[str] = None

class CalendarActionInputRequired(BaseModel):
    action: Optional[Literal["input_required"]] = None
    prompt: Optional[str] = None

class CalendarActionToolCall(BaseModel):
    action: Optional[Literal["tool_call"]] = None
    tool: Optional[Union["CalendarListEventsTool", "CalendarScheduleEventTool"]] = None

class CalendarAgent(BaseModel):
    agent_name: Optional[Union[types.AgentName, str]] = None
    query: Optional[str] = None

class CalendarListEventsTool(BaseModel):
    tool: Optional[Literal["list_events"]] = None
    args: Optional["CalendarListEventsToolArgs"] = None

class CalendarListEventsToolArgs(BaseModel):
    start_time: Optional[str] = None
    end_time: Optional[str] = None

class CalendarScheduleEventTool(BaseModel):
    tool: Optional[Literal["schedule_event"]] = None
    args: Optional["CalendarScheduleEventToolArgs"] = None

class CalendarScheduleEventToolArgs(BaseModel):
    title: Optional[str] = None
    time_start: Optional[str] = None
    time_end: Optional[str] = None

class ProjectAgent(BaseModel):
    agent_name: Optional[Literal["project_manager"]] = None
    query: Optional[str] = None

class ProjectManagerActionToolCall(BaseModel):
    action: Optional[Literal["tool_call"]] = None
    tool: Optional[Union["ProjectManagerListProjectsTool", "ProjectManagerGetProjectTasksTool"]] = None

class ProjectManagerGetProjectTasksTool(BaseModel):
    name: Optional[Literal["get_project_tasks"]] = None
    args: Optional["ProjectManagerGetProjectTasksToolArgs"] = None

class ProjectManagerGetProjectTasksToolArgs(BaseModel):
    project_id: Optional[str] = None

class ProjectManagerListProjectsTool(BaseModel):
    name: Optional[Literal["list_all_projects"]] = None
