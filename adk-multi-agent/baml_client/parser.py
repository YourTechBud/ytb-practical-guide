###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Dict, List, Optional, Union, cast
from typing_extensions import Literal

import baml_py

from . import _baml
from .types import Checked, Check


class LlmResponseParser:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AssistantNextAction(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Union[_baml.types.AssistantActionAgent, _baml.types.AssistantActionEnd, _baml.types.AssistantActionInputRequired]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "AssistantNextAction",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Union[_baml.types.AssistantActionAgent, _baml.types.AssistantActionEnd, _baml.types.AssistantActionInputRequired], parsed)
    
    def CalendarNextAction(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Union[_baml.types.CalendarActionToolCall, _baml.types.CalendarActionEnd, _baml.types.CalendarActionInputRequired]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "CalendarNextAction",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Union[_baml.types.CalendarActionToolCall, _baml.types.CalendarActionEnd, _baml.types.CalendarActionInputRequired], parsed)
    
    def ProjectManagerNextAction(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Union[_baml.types.ProjectManagerActionToolCall, _baml.types.AgentActionEnd, _baml.types.AgentActionInputRequired]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "ProjectManagerNextAction",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Union[_baml.types.ProjectManagerActionToolCall, _baml.types.AgentActionEnd, _baml.types.AgentActionInputRequired], parsed)
    


class LlmStreamParser:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AssistantNextAction(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Optional[Union[_baml.partial_types.AssistantActionAgent, _baml.partial_types.AssistantActionEnd, _baml.partial_types.AssistantActionInputRequired]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "AssistantNextAction",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Optional[Union[_baml.partial_types.AssistantActionAgent, _baml.partial_types.AssistantActionEnd, _baml.partial_types.AssistantActionInputRequired]], parsed)
    
    def CalendarNextAction(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Optional[Union[_baml.partial_types.CalendarActionToolCall, _baml.partial_types.CalendarActionEnd, _baml.partial_types.CalendarActionInputRequired]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "CalendarNextAction",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Optional[Union[_baml.partial_types.CalendarActionToolCall, _baml.partial_types.CalendarActionEnd, _baml.partial_types.CalendarActionInputRequired]], parsed)
    
    def ProjectManagerNextAction(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Optional[Union[_baml.partial_types.ProjectManagerActionToolCall, _baml.partial_types.AgentActionEnd, _baml.partial_types.AgentActionInputRequired]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "ProjectManagerNextAction",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Optional[Union[_baml.partial_types.ProjectManagerActionToolCall, _baml.partial_types.AgentActionEnd, _baml.partial_types.AgentActionInputRequired]], parsed)
    


__all__ = ["LlmResponseParser", "LlmStreamParser"]