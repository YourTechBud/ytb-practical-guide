###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class AgentName(str, Enum):
    pass

class AssistantActionAgent(BaseModel):
    action: Literal["transfer_to_agent"]
    agent: Union["AgentName", str]
    tasks: List[str]
    context: str

class AssistantActionEnd(BaseModel):
    action: Literal["end"]
    answer: str

class AssistantActionInputRequired(BaseModel):
    action: Literal["input_required"]
    prompt: str

class CalendarActionEnd(BaseModel):
    action: Literal["end"]
    answer: str

class CalendarActionInputRequired(BaseModel):
    action: Literal["input_required"]
    prompt: str

class CalendarActionToolCall(BaseModel):
    action: Literal["tool_call"]
    tool: Union["CalendarListEventsTool", "CalendarScheduleEventTool"]

class CalendarAgent(BaseModel):
    agent_name: Union["AgentName", str]
    query: str

class CalendarListEventsTool(BaseModel):
    tool: Literal["list_events"]
    args: "CalendarListEventsToolArgs"

class CalendarListEventsToolArgs(BaseModel):
    start_time: str
    end_time: str

class CalendarScheduleEventTool(BaseModel):
    tool: Literal["schedule_event"]
    args: "CalendarScheduleEventToolArgs"

class CalendarScheduleEventToolArgs(BaseModel):
    title: str
    time_start: str
    time_end: str

class ProjectAgent(BaseModel):
    agent_name: Literal["project_manager"]
    query: str
