###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["AssistantActionAgent","AssistantActionEnd","AssistantActionInputRequired","CalendarActionEnd","CalendarActionInputRequired","CalendarActionToolCall","CalendarAgent","CalendarListEventsTool","CalendarListEventsToolArgs","CalendarScheduleEventTool","CalendarScheduleEventToolArgs","ProjectAgent",]
        ), enums=set(
          ["AgentName",]
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def AssistantActionAgent(self) -> "AssistantActionAgentAst":
        return AssistantActionAgentAst(self)

    @property
    def AssistantActionEnd(self) -> "AssistantActionEndAst":
        return AssistantActionEndAst(self)

    @property
    def AssistantActionInputRequired(self) -> "AssistantActionInputRequiredAst":
        return AssistantActionInputRequiredAst(self)

    @property
    def CalendarActionEnd(self) -> "CalendarActionEndAst":
        return CalendarActionEndAst(self)

    @property
    def CalendarActionInputRequired(self) -> "CalendarActionInputRequiredAst":
        return CalendarActionInputRequiredAst(self)

    @property
    def CalendarActionToolCall(self) -> "CalendarActionToolCallAst":
        return CalendarActionToolCallAst(self)

    @property
    def CalendarAgent(self) -> "CalendarAgentAst":
        return CalendarAgentAst(self)

    @property
    def CalendarListEventsTool(self) -> "CalendarListEventsToolAst":
        return CalendarListEventsToolAst(self)

    @property
    def CalendarListEventsToolArgs(self) -> "CalendarListEventsToolArgsAst":
        return CalendarListEventsToolArgsAst(self)

    @property
    def CalendarScheduleEventTool(self) -> "CalendarScheduleEventToolAst":
        return CalendarScheduleEventToolAst(self)

    @property
    def CalendarScheduleEventToolArgs(self) -> "CalendarScheduleEventToolArgsAst":
        return CalendarScheduleEventToolArgsAst(self)

    @property
    def ProjectAgent(self) -> "ProjectAgentAst":
        return ProjectAgentAst(self)




    @property
    def AgentName(self) -> "AgentNameBuilder":
        return AgentNameBuilder(self)



class AssistantActionAgentAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AssistantActionAgent")
        self._properties: typing.Set[str] = set([ "action",  "agent",  "tasks",  "context", ])
        self._props = AssistantActionAgentProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AssistantActionAgentProperties":
        return self._props


class AssistantActionAgentViewer(AssistantActionAgentAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class AssistantActionAgentProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def action(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("action"))

    @property
    def agent(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("agent"))

    @property
    def tasks(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tasks"))

    @property
    def context(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("context"))

    

class AssistantActionEndAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AssistantActionEnd")
        self._properties: typing.Set[str] = set([ "action",  "answer", ])
        self._props = AssistantActionEndProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AssistantActionEndProperties":
        return self._props


class AssistantActionEndViewer(AssistantActionEndAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class AssistantActionEndProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def action(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("action"))

    @property
    def answer(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("answer"))

    

class AssistantActionInputRequiredAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("AssistantActionInputRequired")
        self._properties: typing.Set[str] = set([ "action",  "prompt", ])
        self._props = AssistantActionInputRequiredProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "AssistantActionInputRequiredProperties":
        return self._props


class AssistantActionInputRequiredViewer(AssistantActionInputRequiredAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class AssistantActionInputRequiredProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def action(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("action"))

    @property
    def prompt(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("prompt"))

    

class CalendarActionEndAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("CalendarActionEnd")
        self._properties: typing.Set[str] = set([ "action",  "answer", ])
        self._props = CalendarActionEndProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CalendarActionEndProperties":
        return self._props


class CalendarActionEndViewer(CalendarActionEndAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class CalendarActionEndProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def action(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("action"))

    @property
    def answer(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("answer"))

    

class CalendarActionInputRequiredAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("CalendarActionInputRequired")
        self._properties: typing.Set[str] = set([ "action",  "prompt", ])
        self._props = CalendarActionInputRequiredProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CalendarActionInputRequiredProperties":
        return self._props


class CalendarActionInputRequiredViewer(CalendarActionInputRequiredAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class CalendarActionInputRequiredProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def action(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("action"))

    @property
    def prompt(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("prompt"))

    

class CalendarActionToolCallAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("CalendarActionToolCall")
        self._properties: typing.Set[str] = set([ "action",  "tool", ])
        self._props = CalendarActionToolCallProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CalendarActionToolCallProperties":
        return self._props


class CalendarActionToolCallViewer(CalendarActionToolCallAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class CalendarActionToolCallProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def action(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("action"))

    @property
    def tool(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool"))

    

class CalendarAgentAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("CalendarAgent")
        self._properties: typing.Set[str] = set([ "agent_name",  "query", ])
        self._props = CalendarAgentProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CalendarAgentProperties":
        return self._props


class CalendarAgentViewer(CalendarAgentAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class CalendarAgentProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def agent_name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("agent_name"))

    @property
    def query(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("query"))

    

class CalendarListEventsToolAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("CalendarListEventsTool")
        self._properties: typing.Set[str] = set([ "tool",  "args", ])
        self._props = CalendarListEventsToolProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CalendarListEventsToolProperties":
        return self._props


class CalendarListEventsToolViewer(CalendarListEventsToolAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class CalendarListEventsToolProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def tool(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool"))

    @property
    def args(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("args"))

    

class CalendarListEventsToolArgsAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("CalendarListEventsToolArgs")
        self._properties: typing.Set[str] = set([ "start_time",  "end_time", ])
        self._props = CalendarListEventsToolArgsProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CalendarListEventsToolArgsProperties":
        return self._props


class CalendarListEventsToolArgsViewer(CalendarListEventsToolArgsAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class CalendarListEventsToolArgsProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def start_time(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("start_time"))

    @property
    def end_time(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("end_time"))

    

class CalendarScheduleEventToolAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("CalendarScheduleEventTool")
        self._properties: typing.Set[str] = set([ "tool",  "args", ])
        self._props = CalendarScheduleEventToolProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CalendarScheduleEventToolProperties":
        return self._props


class CalendarScheduleEventToolViewer(CalendarScheduleEventToolAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class CalendarScheduleEventToolProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def tool(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tool"))

    @property
    def args(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("args"))

    

class CalendarScheduleEventToolArgsAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("CalendarScheduleEventToolArgs")
        self._properties: typing.Set[str] = set([ "title",  "time_start",  "time_end", ])
        self._props = CalendarScheduleEventToolArgsProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CalendarScheduleEventToolArgsProperties":
        return self._props


class CalendarScheduleEventToolArgsViewer(CalendarScheduleEventToolArgsAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class CalendarScheduleEventToolArgsProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def title(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("title"))

    @property
    def time_start(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("time_start"))

    @property
    def time_end(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("time_end"))

    

class ProjectAgentAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ProjectAgent")
        self._properties: typing.Set[str] = set([ "agent_name",  "query", ])
        self._props = ProjectAgentProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ProjectAgentProperties":
        return self._props


class ProjectAgentViewer(ProjectAgentAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ProjectAgentProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def agent_name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("agent_name"))

    @property
    def query(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("query"))

    



class AgentNameAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("AgentName")
        self._values: typing.Set[str] = set([])
        self._vals = AgentNameValues(self._bldr, self._values)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "AgentNameValues":
        return self._vals


class AgentNameBuilder(AgentNameAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    def add_value(self, name: str) -> EnumValueBuilder:
        if name in self._values:
            raise ValueError(f"Value {name} already exists.")
        self._values.add(name)
        return self._bldr.value(name)

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueBuilder]]:
        return [(name, self._bldr.value(name)) for name in self._values]


class AgentNameValues:
    def __init__(self, enum_bldr: EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values

    

    
    def __getattr__(self, name: str) -> EnumValueBuilder:
        if name not in self.__values:
            raise AttributeError(f"Value {name} not found.")
        return self.__bldr.value(name)
    


__all__ = ["TypeBuilder"]