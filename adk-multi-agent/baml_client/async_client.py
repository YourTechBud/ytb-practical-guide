###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Dict, List, Optional, TypeVar, Union, cast
from typing_extensions import Literal

import baml_py

from . import _baml
from ._baml import BamlCallOptions
from .types import Checked, Check
from .parser import LlmResponseParser, LlmStreamParser
from .async_request import AsyncHttpRequest, AsyncHttpStreamRequest
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


OutputType = TypeVar('OutputType')


class BamlAsyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"
    __http_request: AsyncHttpRequest
    __http_stream_request: AsyncHttpStreamRequest
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser
    __baml_options: _baml.BamlCallOptions

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[_baml.BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager, baml_options)
      self.__http_request = AsyncHttpRequest(self.__runtime, self.__ctx_manager)
      self.__http_stream_request = AsyncHttpStreamRequest(self.__runtime, self.__ctx_manager)
      self.__llm_response_parser = LlmResponseParser(self.__runtime, self.__ctx_manager)
      self.__llm_stream_parser = LlmStreamParser(self.__runtime, self.__ctx_manager)
      self.__baml_options = baml_options or {}

    def with_options(
      self,
      tb: Optional[_baml.type_builder.TypeBuilder] = None,
      client_registry: Optional[baml_py.baml_py.ClientRegistry] = None,
      collector: Optional[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]] = None,
      env: Optional[Dict[str, Optional[str]]] = None,
    ) -> "BamlAsyncClient":
      """
      Returns a new instance of BamlAsyncClient with explicitly typed baml options
      for Python 3.8 compatibility.
      """
      new_options = self.__baml_options.copy()

      # Override if any keyword arguments were provided.
      if tb is not None:
          new_options["tb"] = tb
      if client_registry is not None:
          new_options["client_registry"] = client_registry
      if collector is not None:
          new_options["collector"] = collector
      if env is not None:
          new_options["env"] = env

      return BamlAsyncClient(self.__runtime, self.__ctx_manager, new_options)

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser

    
    async def AssistantNextAction(
        self,
        context: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> Union[_baml.types.AssistantActionAgent, _baml.types.AssistantActionEnd, _baml.types.AssistantActionInputRequired]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "AssistantNextAction",
        {
          "context": context,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(Union[_baml.types.AssistantActionAgent, _baml.types.AssistantActionEnd, _baml.types.AssistantActionInputRequired], raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    
    async def CalendarNextAction(
        self,
        context: str,additional_instructions: str,date_today: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> Union[_baml.types.CalendarActionToolCall, _baml.types.CalendarActionEnd, _baml.types.CalendarActionInputRequired]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = await self.__runtime.call_function(
        "CalendarNextAction",
        {
          "context": context,"additional_instructions": additional_instructions,"date_today": date_today,
        },
        self.__ctx_manager.clone_context(),
        tb,
        __cr__,
        collectors,
        env,
      )
      return cast(Union[_baml.types.CalendarActionToolCall, _baml.types.CalendarActionEnd, _baml.types.CalendarActionInputRequired], raw.cast_to(_baml.types, _baml.types, _baml.partial_types, False))
    


class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __baml_options: _baml.BamlCallOptions
    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[_baml.BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__baml_options = baml_options or {}

    
    def AssistantNextAction(
        self,
        context: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[Union[_baml.partial_types.AssistantActionAgent, _baml.partial_types.AssistantActionEnd, _baml.partial_types.AssistantActionInputRequired]], Union[_baml.types.AssistantActionAgent, _baml.types.AssistantActionEnd, _baml.types.AssistantActionInputRequired]]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "AssistantNextAction",
        {
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[Optional[Union[_baml.partial_types.AssistantActionAgent, _baml.partial_types.AssistantActionEnd, _baml.partial_types.AssistantActionInputRequired]], Union[_baml.types.AssistantActionAgent, _baml.types.AssistantActionEnd, _baml.types.AssistantActionInputRequired]](
        raw,
        lambda x: cast(Optional[Union[_baml.partial_types.AssistantActionAgent, _baml.partial_types.AssistantActionEnd, _baml.partial_types.AssistantActionInputRequired]], x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(Union[_baml.types.AssistantActionAgent, _baml.types.AssistantActionEnd, _baml.types.AssistantActionInputRequired], x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CalendarNextAction(
        self,
        context: str,additional_instructions: str,date_today: str,
        baml_options: _baml.BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[Union[_baml.partial_types.CalendarActionToolCall, _baml.partial_types.CalendarActionEnd, _baml.partial_types.CalendarActionInputRequired]], Union[_baml.types.CalendarActionToolCall, _baml.types.CalendarActionEnd, _baml.types.CalendarActionInputRequired]]:
      options: _baml.BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      env = _baml.env_vars_to_dict(options.get("env", {}))
      raw = self.__runtime.stream_function(
        "CalendarNextAction",
        {
          "context": context,
          "additional_instructions": additional_instructions,
          "date_today": date_today,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
        env,
      )

      return baml_py.BamlStream[Optional[Union[_baml.partial_types.CalendarActionToolCall, _baml.partial_types.CalendarActionEnd, _baml.partial_types.CalendarActionInputRequired]], Union[_baml.types.CalendarActionToolCall, _baml.types.CalendarActionEnd, _baml.types.CalendarActionInputRequired]](
        raw,
        lambda x: cast(Optional[Union[_baml.partial_types.CalendarActionToolCall, _baml.partial_types.CalendarActionEnd, _baml.partial_types.CalendarActionInputRequired]], x.cast_to(_baml.types, _baml.types, _baml.partial_types, True)),
        lambda x: cast(Union[_baml.types.CalendarActionToolCall, _baml.types.CalendarActionEnd, _baml.types.CalendarActionInputRequired], x.cast_to(_baml.types, _baml.types, _baml.partial_types, False)),
        self.__ctx_manager.get(),
      )
    


b = BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b", "BamlCallOptions"]